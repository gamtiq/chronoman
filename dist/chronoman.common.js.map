{"version":3,"sources":["../chronoman.js"],"names":["Array","isArray","value","Object","prototype","toString","call","Timer","initValue","that","_onTimeoutEnd","_timeoutId","execute","setProperties","_period","getPeriod","setPeriod","period","getPeriodValue","execQty","getExecutionQty","length","_recurrent","isRecurrent","setRecurrent","bRecurrent","_repeatQty","getRepeatQty","setRepeatQty","nQty","_repeatTest","getRepeatTest","setRepeatTest","test","_data","getData","setData","data","_executionQty","setExecutionQty","_setTimeout","nTimeout","setTimeout","_clearTimeout","clearTimeout","_active","isActive","setActive","bActive","start","property","propType","stop","_action","getAction","setAction","action","_passToAction","isPassToAction","setPassToAction","bPass","propMap","recurrent","repeatQty","repeatTest","active","passToAction","actionResult","onExecute","onExecuteResult","bPassToAction","dispose","join"],"mappings":";;;;;;;;AAAA;;;;;;AAOA,IAAI,CAAEA,MAAMC,OAAZ,EAAqB;AACjBD,UAAMC,OAAN,GAAgB,UAASC,KAAT,EAAgB;AAC5B,eAAOC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,KAA/B,MAA0C,gBAAjD;AACH,KAFD;AAGH;;AAED;;;;;;AAMA;;;;;;AAMA;;;;;;;;AAQA;;;;;;AAOA;;;;;;;;;AASA,IAAIK,QAAQ,SAASA,KAAT,CAAeC,SAAf,EAA0B;;AAElC,QAAIC,OAAO,IAAX;;AAEA;;;;;;;;;AASA,SAAKC,aAAL,GAAqB,YAAW;AAC5BD,aAAKE,UAAL,GAAkB,IAAlB;AACAF,aAAKG,OAAL;AACH,KAHD;;AAKA,QAAIJ,aAAa,QAAOA,SAAP,yCAAOA,SAAP,OAAqB,QAAtC,EAAgD;AAC5C,aAAKK,aAAL,CAAmBL,SAAnB;AACH;AACJ,CArBD;;AAwBA;;;;;;;;;;;;;;;;;;;;;AAqBAD,MAAMH,SAAN,CAAgBU,OAAhB,GAA0B,IAA1B;;AAEA;;;;;;;;AAQAP,MAAMH,SAAN,CAAgBW,SAAhB,GAA4B,YAAW;AACnC,WAAO,KAAKD,OAAZ;AACH,CAFD;;AAIA;;;;;;;;;;AAUAP,MAAMH,SAAN,CAAgBY,SAAhB,GAA4B,UAASC,MAAT,EAAiB;AACzC,SAAKH,OAAL,GAAeG,MAAf;AACA,WAAO,IAAP;AACH,CAHD;;AAKA;;;;;;;;;;AAUAV,MAAMH,SAAN,CAAgBc,cAAhB,GAAiC,YAAW;AACxC,QAAIC,OAAJ;AACA,QAAIF,SAAS,KAAKF,SAAL,EAAb;AACA,QAAI,OAAOE,MAAP,KAAkB,UAAtB,EAAkC;AAC9BA,iBAASA,OAAO,IAAP,CAAT;AACH;AACD,QAAIjB,MAAMC,OAAN,CAAcgB,MAAd,CAAJ,EAA2B;AACvBE,kBAAU,KAAKC,eAAL,EAAV;AACAH,iBAASA,OAAQE,UAAUF,OAAOI,MAAjB,GAA0BF,OAA1B,GAAoCF,OAAOI,MAAP,GAAgB,CAA5D,CAAT;AACH;AACD,WAAOJ,MAAP;AACH,CAXD;;AAaA;;;;;;;;AAQAV,MAAMH,SAAN,CAAgBkB,UAAhB,GAA6B,KAA7B;;AAEA;;;;;;;;AAQAf,MAAMH,SAAN,CAAgBmB,WAAhB,GAA8B,YAAW;AACrC,WAAO,KAAKD,UAAZ;AACH,CAFD;;AAIA;;;;;;;;;;AAUAf,MAAMH,SAAN,CAAgBoB,YAAhB,GAA+B,UAASC,UAAT,EAAqB;AAChD,SAAKH,UAAL,GAAkBG,UAAlB;AACA,WAAO,IAAP;AACH,CAHD;;AAKA;;;;;;;;AAQAlB,MAAMH,SAAN,CAAgBsB,UAAhB,GAA6B,CAA7B;;AAEA;;;;;;;;AAQAnB,MAAMH,SAAN,CAAgBuB,YAAhB,GAA+B,YAAW;AACtC,WAAO,KAAKD,UAAZ;AACH,CAFD;;AAIA;;;;;;;;;;AAUAnB,MAAMH,SAAN,CAAgBwB,YAAhB,GAA+B,UAASC,IAAT,EAAe;AAC1C,SAAKH,UAAL,GAAkBG,IAAlB;AACA,WAAO,IAAP;AACH,CAHD;;AAKA;;;;;;;;;;;;;;AAcAtB,MAAMH,SAAN,CAAgB0B,WAAhB,GAA8B,IAA9B;;AAEA;;;;;;;;AAQAvB,MAAMH,SAAN,CAAgB2B,aAAhB,GAAgC,YAAW;AACvC,WAAO,KAAKD,WAAZ;AACH,CAFD;;AAIA;;;;;;;;;;AAUAvB,MAAMH,SAAN,CAAgB4B,aAAhB,GAAgC,UAASC,IAAT,EAAe;AAC3C,SAAKH,WAAL,GAAmBG,IAAnB;AACA,WAAO,IAAP;AACH,CAHD;;AAKA;;;;;;AAMA1B,MAAMH,SAAN,CAAgB8B,KAAhB,GAAwB,IAAxB;;AAEA;;;;;;;;AAQA3B,MAAMH,SAAN,CAAgB+B,OAAhB,GAA0B,YAAW;AACjC,WAAO,KAAKD,KAAZ;AACH,CAFD;;AAIA;;;;;;;;;;AAUA3B,MAAMH,SAAN,CAAgBgC,OAAhB,GAA0B,UAASC,IAAT,EAAe;AACrC,SAAKH,KAAL,GAAaG,IAAb;AACA,WAAO,IAAP;AACH,CAHD;;AAKA;;;;;;;;AAQA9B,MAAMH,SAAN,CAAgBkC,aAAhB,GAAgC,CAAhC;;AAEA;;;;;;;;AAQA/B,MAAMH,SAAN,CAAgBgB,eAAhB,GAAkC,YAAW;AACzC,WAAO,KAAKkB,aAAZ;AACH,CAFD;;AAIA;;;;;;;;;;AAUA/B,MAAMH,SAAN,CAAgBmC,eAAhB,GAAkC,UAASV,IAAT,EAAe;AAC7C,SAAKS,aAAL,GAAqBT,OAAO,CAAP,GAAWA,IAAX,GAAkB,CAAvC;AACA,WAAO,IAAP;AACH,CAHD;;AAKA;;;;;;;;AAQAtB,MAAMH,SAAN,CAAgBO,UAAhB,GAA6B,IAA7B;;AAEA;;;;;;;;;;;;;;;;;AAiBAJ,MAAMH,SAAN,CAAgBoC,WAAhB,GAA8B,UAASC,QAAT,EAAmB;AAC7C;;AACA,QAAIxB,MAAJ;AACA,QAAI,OAAOwB,QAAP,KAAoB,QAAxB,EAAkC;AAC9BxB,iBAASwB,QAAT;AACH,KAFD,MAGK;AACDxB,iBAAS,KAAKC,cAAL,EAAT;AACH;AACD,QAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,aAAKN,UAAL,GAAkB+B,WAAW,KAAKhC,aAAhB,EAA+BO,MAA/B,CAAlB;AACH;AACD,WAAO,IAAP;AACH,CAbD;;AAeA;;;;;;;;;;AAUAV,MAAMH,SAAN,CAAgBuC,aAAhB,GAAgC,YAAW;AACvC;;AACA,QAAI,KAAKhC,UAAT,EAAqB;AACjBiC,qBAAa,KAAKjC,UAAlB;AACA,aAAKA,UAAL,GAAkB,IAAlB;AACH;AACD,WAAO,IAAP;AACH,CAPD;;AASA;;;;;;;AAOAJ,MAAMH,SAAN,CAAgByC,OAAhB,GAA0B,KAA1B;;AAEA;;;;;;;;AAQAtC,MAAMH,SAAN,CAAgB0C,QAAhB,GAA2B,YAAW;AAClC,WAAO,KAAKD,OAAZ;AACH,CAFD;;AAIA;;;;;;;;;;;;;;;AAeAtC,MAAMH,SAAN,CAAgB2C,SAAhB,GAA4B,UAASC,OAAT,EAAkB;AAC1C;;AACA,QAAIA,WAAW,CAAE,KAAKH,OAAtB,EAA+B;AAC3B,aAAKP,aAAL,GAAqB,CAArB;AACH;AACD,SAAKO,OAAL,GAAeG,OAAf;AACA;AACA,SAAKL,aAAL;AACA,QAAIK,OAAJ,EAAa;AACT,aAAKR,WAAL;AACH;AACD,WAAO,IAAP;AACH,CAZD;;AAcA;;;;;;;;;;;;;;;;AAgBAjC,MAAMH,SAAN,CAAgB6C,KAAhB,GAAwB,UAASC,QAAT,EAAmB;AACvC;;AACA,QAAIC,kBAAkBD,QAAlB,yCAAkBA,QAAlB,CAAJ;AACA,QAAIC,aAAa,QAAb,IAAyBA,aAAa,UAAtC,IAAoDnD,MAAMC,OAAN,CAAciD,QAAd,CAAxD,EAAiF;AAC7E,aAAKlC,SAAL,CAAekC,QAAf;AACH,KAFD,MAGK,IAAIA,YAAYC,aAAa,QAA7B,EAAuC;AACxC,aAAKtC,aAAL,CAAmBqC,QAAnB;AACH;AACD,WAAO,KAAKH,SAAL,CAAe,IAAf,CAAP;AACH,CAVD;;AAYA;;;;;;;;;AASAxC,MAAMH,SAAN,CAAgBgD,IAAhB,GAAuB,YAAW;AAC9B,WAAO,KAAKL,SAAL,CAAe,KAAf,CAAP;AACH,CAFD;;AAIA;;;;;;;;;;;;AAYAxC,MAAMH,SAAN,CAAgBiD,OAAhB,GAA0B,IAA1B;;AAEA;;;;;;;;AAQA9C,MAAMH,SAAN,CAAgBkD,SAAhB,GAA4B,YAAW;AACnC,WAAO,KAAKD,OAAZ;AACH,CAFD;;AAIA;;;;;;;;;;AAUA9C,MAAMH,SAAN,CAAgBmD,SAAhB,GAA4B,UAASC,MAAT,EAAiB;AACzC,SAAKH,OAAL,GAAeG,MAAf;AACA,WAAO,IAAP;AACH,CAHD;;AAKA;;;;;;;AAOAjD,MAAMH,SAAN,CAAgBqD,aAAhB,GAAgC,KAAhC;;AAEA;;;;;;;;AAQAlD,MAAMH,SAAN,CAAgBsD,cAAhB,GAAiC,YAAW;AACxC,WAAO,KAAKD,aAAZ;AACH,CAFD;;AAIA;;;;;;;;;;;AAWAlD,MAAMH,SAAN,CAAgBuD,eAAhB,GAAkC,UAASC,KAAT,EAAgB;AAC9C,SAAKH,aAAL,GAAqBG,KAArB;AACA,WAAO,IAAP;AACH,CAHD;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEArD,MAAMH,SAAN,CAAgBS,aAAhB,GAAgC,UAASgD,OAAT,EAAkB;AAC9C,QAAIA,WAAW,QAAOA,OAAP,yCAAOA,OAAP,OAAmB,QAAlC,EAA4C;AACxC,YAAI,YAAYA,OAAhB,EAAyB;AACrB,iBAAKN,SAAL,CAAeM,QAAQL,MAAvB;AACH;AACD,YAAI,YAAYK,OAAhB,EAAyB;AACrB,iBAAK7C,SAAL,CAAe6C,QAAQ5C,MAAvB;AACH;AACD,YAAI,eAAe4C,OAAnB,EAA4B;AACxB,iBAAKrC,YAAL,CAAkBqC,QAAQC,SAA1B;AACH;AACD,YAAI,eAAeD,OAAnB,EAA4B;AACxB,iBAAKjC,YAAL,CAAkBiC,QAAQE,SAA1B;AACH;AACD,YAAI,gBAAgBF,OAApB,EAA6B;AACzB,iBAAK7B,aAAL,CAAmB6B,QAAQG,UAA3B;AACH;AACD,YAAI,YAAYH,OAAhB,EAAyB;AACrB,iBAAKd,SAAL,CAAec,QAAQI,MAAvB;AACH;AACD,YAAI,kBAAkBJ,OAAtB,EAA+B;AAC3B,iBAAKF,eAAL,CAAqBE,QAAQK,YAA7B;AACH;AACD,YAAI,UAAUL,OAAd,EAAuB;AACnB,iBAAKzB,OAAL,CAAayB,QAAQxB,IAArB;AACH;AACJ;AACD,WAAO,IAAP;AACH,CA5BD;;AA8BA;;;;;;AAMA9B,MAAMH,SAAN,CAAgB+D,YAAhB,GAA+B,KAAK,CAApC;;AAEA;;;;;;;;;AASA5D,MAAMH,SAAN,CAAgBgE,SAAhB,GAA4B,IAA5B;;AAEA;;;;;;AAMA7D,MAAMH,SAAN,CAAgBiE,eAAhB,GAAkC,KAAK,CAAvC;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA9D,MAAMH,SAAN,CAAgBQ,OAAhB,GAA0B,YAAW;AACjC;AACA;;AACA,QAAI4C,SAAS,KAAKF,SAAL,EAAb;AAAA,QACIgB,gBAAgB,KAAKZ,cAAL,EADpB;AAAA,QAEIM,aAAa,KAAKjC,aAAL,EAFjB;AAAA,QAGIiB,OAHJ;AAAA,QAGa/B,MAHb;AAIA,SAAK0B,aAAL;AACA,QAAIa,MAAJ,EAAY;AACR,YAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,iBAAKW,YAAL,GAAoBG,gBACdd,OAAO,IAAP,CADc,GAEdA,QAFN;AAGH,SAJD,MAKK,IAAI,OAAOA,OAAO5C,OAAd,KAA0B,UAA9B,EAA0C;AAC3C,iBAAKuD,YAAL,GAAoBG,gBACdd,OAAO5C,OAAP,CAAe,IAAf,CADc,GAEd4C,OAAO5C,OAAP,EAFN;AAGH;AACJ;AACD,QAAI,OAAO,KAAKwD,SAAZ,KAA0B,UAA9B,EAA0C;AACtC,aAAKC,eAAL,GAAuBC,gBACjB,KAAKF,SAAL,CAAe,IAAf,CADiB,GAEjB,KAAKA,SAAL,EAFN;AAGH;AACD,SAAK9B,aAAL;AACAU,cAAU,KAAKF,QAAL,EAAV;AACA,QAAIE,YACQ,KAAKzB,WAAL,MACO,KAAKI,YAAL,MAAuB,KAAKW,aADnC,IAEQ0B,eACK,CAAC/C,SAAS+C,WAAW,IAAX,CAAV,KAA+B/C,WAAW,CAD/C,MAEI,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,UAAU,CAF5C,CAHhB,CAAJ,EAMgB;AACZ,aAAKuB,WAAL,CAAiBvB,MAAjB;AACH,KARD,MASK,IAAI+B,WAAW,CAAE,KAAKrC,UAAtB,EAAkC;AACnC,aAAKkC,OAAL,GAAe,KAAf;AACH;AACD,WAAO,IAAP;AACH,CAxCD;;AA0CA;;;;;AAKAtC,MAAMH,SAAN,CAAgBmE,OAAhB,GAA0B,YAAW;AACjC;;AACA,SAAK5B,aAAL;AACA,SAAKU,OAAL,GACI,KAAKnB,KAAL,GACA,KAAKpB,OAAL,GACA,KAAKgB,WAAL,GACA,KAAKsC,SAAL,GACI,IALR;AAMH,CATD;;AAWA;;;;;AAKA7D,MAAMH,SAAN,CAAgBC,QAAhB,GAA2B,YAAW;AAClC;;AACA,QAAIY,SAAS,KAAKF,SAAL,EAAb;AACA,WAAO,CACC,SADD,EAEC,WAFD,EAEc,KAAK+B,QAAL,EAFd,EAGC,aAHD,EAGgB,OAAO7B,MAAP,KAAkB,UAAlB,GAA+B,UAA/B,GAA4CA,MAH5D,EAIC,gBAJD,EAImB,KAAKM,WAAL,EAJnB,EAKC,iBALD,EAKoB,KAAKI,YAAL,EALpB,EAMC,kBAND,EAMsB,KAAKI,aAAL,KAAuB,WAAvB,GAAqC,IAN3D,EAOC,qBAPD,EAOwB,KAAK2B,cAAL,EAPxB,EAQC,aARD,EAQiB,KAAKJ,SAAL,KAAmB,WAAnB,GAAiC,IARlD,EASC,oBATD,EASuB,KAAKlC,eAAL,EATvB,EAUC,WAVD,EAUc,KAAKe,OAAL,EAVd,EAWGqC,IAXH,CAWQ,EAXR,CAAP;AAYH,CAfD;;AAiBA;;kBAEejE,K","file":"chronoman.common.js","sourcesContent":["/**\n * @module chronoman\n * \n * @author Denis Sikuler\n */\n\n\nif (! Array.isArray) {\n    Array.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\";\n    };\n}\n\n/**\n * @callback module:chronoman~GetPeriodValue\n * @param {module:chronoman~Timer} [timer]\n * @return {Integer | Integer[]}\n */\n\n/**\n * Value determining time period in milliseconds that is used to schedule related action execution.\n *\n * @typedef {Integer | Integer[] | module:chronoman~GetPeriodValue} module:chronoman~PeriodValue\n */\n\n/**\n * Object describing action that should be executed after time period is elapsed.\n *\n * @typedef {Object} module:chronoman~ActionObject\n * @property {Function} execute\n *      Function that should be executed.\n */\n\n/**\n * Action that should be executed after time period is elapsed.\n *\n * @typedef {Function | module:chronoman~ActionObject} module:chronoman~Action\n */\n\n\n/**\n * Utility class to simplify use of timers created by setTimeout.\n * \n * @param {Object} [initValue]\n *      Specifies initial property values. Keys are property names, their values are values of corresponding properties.\n *      See {@link module:chronoman~Timer#setProperties setProperties} for details.\n * @constructor\n * @see {@link module:chronoman~Timer#setProperties setProperties}\n */\nvar Timer = function Timer(initValue) {\n    \n    var that = this;\n    \n    /**\n     * Handle timeout's end.\n     *\n     * @instance\n     * @method\n     * @protected\n     * @see {@link module:chronoman~Timer#_timeoutId _timeoutId}\n     * @see {@link module:chronoman~Timer#execute execute}\n     */\n    this._onTimeoutEnd = function() {\n        that._timeoutId = null;\n        that.execute();\n    };\n\n    if (initValue && typeof initValue === \"object\") {\n        this.setProperties(initValue);\n    }\n};\n\n\n/**\n * Time period in milliseconds, array of periods or function that returns period or array of periods.\n * A related action will be executed when the period is elapsed.\n * <br>\n * When array of periods is set the used period is selected in the following way:\n * first array item (with index 0) specifies period before first action's execution,\n * second array item (with index 1) specifies period before second action's execution,\n * and so on.\n * When quantity of action executions is more than array's length\n * the last item of array is used as period for subsequent executions.\n * <br>\n * When function is set its returned value is used to determine next period.\n * The timer instance to which the function is associated will be passed as function's parameter.\n * When function returns an array of periods the array is used to select period before next execution\n * according to rules described above.\n *\n * @protected\n * @type {module:chronoman~PeriodValue}\n * @see {@link module:chronoman~Timer#execute execute}\n * @see {@link module:chronoman~Timer#setActive setActive}\n */\nTimer.prototype._period = null;\n\n/**\n * Return value determining time period that is used to schedule related action execution.\n *\n * @return {module:chronoman~PeriodValue}\n *      Value determining time period.\n * @method\n * @see {@link module:chronoman~Timer#_period _period}\n */\nTimer.prototype.getPeriod = function() {\n    return this._period;\n};\n\n/**\n * Set value determining time period that is used to schedule related action execution.\n *\n * @param {module:chronoman~PeriodValue} period\n *      Value determining time period.\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#_period _period}\n */\nTimer.prototype.setPeriod = function(period) {\n    this._period = period;\n    return this;\n};\n\n/**\n * Return time period that will be used to schedule related action execution.\n *\n * @return {Integer}\n *      Time period in milliseconds.\n * @method\n * @see {@link module:chronoman~Timer#_period _period}\n * @see {@link module:chronoman~Timer#getPeriod getPeriod}\n * @see {@link module:chronoman~Timer#getExecutionQty getExecutionQty}\n */\nTimer.prototype.getPeriodValue = function() {\n    var execQty;\n    var period = this.getPeriod();\n    if (typeof period === \"function\") {\n        period = period(this);\n    }\n    if (Array.isArray(period)) {\n        execQty = this.getExecutionQty();\n        period = period[ execQty < period.length ? execQty : period.length - 1 ];\n    }\n    return period;\n};\n\n/**\n * Indicates whether related action should be executed repeatedly.\n * \n * @protected\n * @type {Boolean}\n * @see {@link module:chronoman~Timer#execute execute}\n * @see {@link module:chronoman~Timer#setActive setActive}\n */\nTimer.prototype._recurrent = false;\n\n/**\n * Test whether related action should be executed repeatedly.\n *\n * @return {Boolean}\n *      <code>true</code>, if related action should be executed repeatedly, otherwise <code>false</code>.\n * @method\n * @see {@link module:chronoman~Timer#_recurrent _recurrent}\n */\nTimer.prototype.isRecurrent = function() {\n    return this._recurrent;\n};\n\n/**\n * Set or cancel repeating of related action execution.\n *\n * @param {Boolean} bRecurrent\n *      <code>true</code>, if action should be executed repeatedly, <code>false</code>, if action repeating should be off.\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#_recurrent _recurrent}\n */\nTimer.prototype.setRecurrent = function(bRecurrent) {\n    this._recurrent = bRecurrent;\n    return this;\n};\n\n/**\n * Specifies how many times related action should be repeated after first execution.\n *\n * @protected\n * @type {Integer}\n * @see {@link module:chronoman~Timer#execute execute}\n * @see {@link module:chronoman~Timer#setActive setActive}\n */\nTimer.prototype._repeatQty = 0;\n\n/**\n * Return the value that indicates how many times related action should be repeated after first execution.\n *\n * @return {Integer}\n *      Value that indicates how many times related action should be repeated after first execution.\n * @method\n * @see {@link module:chronoman~Timer#_repeatQty _repeatQty}\n */\nTimer.prototype.getRepeatQty = function() {\n    return this._repeatQty;\n};\n\n/**\n * Set how many times related action should be repeated after first execution.\n *\n * @param {Integer} nQty\n *      Value that indicates how many times related action should be repeated after first execution.\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#_repeatQty _repeatQty}\n */\nTimer.prototype.setRepeatQty = function(nQty) {\n    this._repeatQty = nQty;\n    return this;\n};\n\n/**\n * Specifies function that should be called after action execution to determine\n * whether execution should be repeated.\n * If the function returns a true value or non-negative number it means that execution will be repeated.\n * When the function returns non-negative number this number will be used\n * as time period in milliseconds to schedule next action execution.\n * <br>\n * The timer instance to which the test is associated will be passed as function's parameter.\n *\n * @protected\n * @type {Function}\n * @see {@link module:chronoman~Timer#execute execute}\n * @see {@link module:chronoman~Timer#setActive setActive}\n */\nTimer.prototype._repeatTest = null;\n\n/**\n * Return the function that is used to determine whether action execution should be repeated.\n *\n * @return {Function}\n *      Function that is used to determine whether action execution should be repeated.\n * @method\n * @see {@link module:chronoman~Timer#_repeatTest _repeatTest}\n */\nTimer.prototype.getRepeatTest = function() {\n    return this._repeatTest;\n};\n\n/**\n * Set the function that should be used to determine whether action execution should be repeated.\n *\n * @param {Function} test\n *      Function that should be used to determine whether action execution should be repeated.\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#_repeatTest _repeatTest}\n */\nTimer.prototype.setRepeatTest = function(test) {\n    this._repeatTest = test;\n    return this;\n};\n\n/**\n * Auxiliary data associated with the timer instance.\n *\n * @protected\n * @type {*}\n */\nTimer.prototype._data = null;\n\n/**\n * Return auxiliary data associated with the timer instance.\n *\n * @return {*}\n *      Auxiliary data associated with the timer instance.\n * @method\n * @see {@link module:chronoman~Timer#_data _data}\n */\nTimer.prototype.getData = function() {\n    return this._data;\n};\n\n/**\n * Set auxiliary data associated with the timer instance.\n *\n * @param {*} data\n *      Auxiliary data associated with the timer instance.\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#_data _data}\n */\nTimer.prototype.setData = function(data) {\n    this._data = data;\n    return this;\n};\n\n/**\n * Specifies how many times action was executed.\n *\n * @protected\n * @type {Integer}\n * @see {@link module:chronoman~Timer#execute execute}\n * @see {@link module:chronoman~Timer#setActive setActive}\n */\nTimer.prototype._executionQty = 0;\n\n/**\n * Return the value that indicates how many times action was executed.\n *\n * @return {Integer}\n *      Value that indicates how many times action was executed.\n * @method\n * @see {@link module:chronoman~Timer#_executionQty _executionQty}\n */\nTimer.prototype.getExecutionQty = function() {\n    return this._executionQty;\n};\n\n/**\n * Set the value that indicates how many times action was executed.\n *\n * @param {Integer} nQty\n *      Value that indicates how many times action was executed.\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#_executionQty _executionQty}\n */\nTimer.prototype.setExecutionQty = function(nQty) {\n    this._executionQty = nQty > 0 ? nQty : 0;\n    return this;\n};\n\n/**\n * Timer id.\n * \n * @protected\n * @type {Integer}\n * @see {@link module:chronoman~Timer#_clearTimeout _clearTimeout}\n * @see {@link module:chronoman~Timer#_setTimeout _setTimeout}\n */\nTimer.prototype._timeoutId = null;\n\n/**\n * Schedule related action execution.\n *\n * @param {Integer} [nTimeout]\n *      Time period in milliseconds that is used to schedule action execution.\n *      By default the current value of {@link module:chronoman~Timer#getPeriod period} property is used\n *      to determine time period.\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @protected\n * @see {@link module:chronoman~Timer#_clearTimeout _clearTimeout}\n * @see {@link module:chronoman~Timer#_onTimeoutEnd _onTimeoutEnd}\n * @see {@link module:chronoman~Timer#_timeoutId _timeoutId}\n * @see {@link module:chronoman~Timer#execute execute}\n * @see {@link module:chronoman~Timer#getPeriodValue getPeriodValue}\n */\nTimer.prototype._setTimeout = function(nTimeout) {\n    \"use strict\";\n    var period;\n    if (typeof nTimeout === \"number\") {\n        period = nTimeout;\n    }\n    else {\n        period = this.getPeriodValue();\n    }\n    if (typeof period === \"number\") {\n        this._timeoutId = setTimeout(this._onTimeoutEnd, period);\n    }\n    return this;\n};\n\n/**\n * Cancel execution of scheduled action.\n *\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @protected\n * @see {@link module:chronoman~Timer#_setTimeout _setTimeout}\n * @see {@link module:chronoman~Timer#_timeoutId _timeoutId}\n */\nTimer.prototype._clearTimeout = function() {\n    \"use strict\";\n    if (this._timeoutId) {\n        clearTimeout(this._timeoutId);\n        this._timeoutId = null;\n    }\n    return this;\n};\n\n/**\n * Indicates whether timer is in use.\n * \n * @protected\n * @type {Boolean}\n * @see {@link module:chronoman~Timer#execute execute}\n */\nTimer.prototype._active = false;\n\n/**\n * Test whether timer is in use.\n *\n * @return {Boolean}\n *      <code>true</code>, if timer is in use, otherwise <code>false</code>.\n * @method\n * @see {@link module:chronoman~Timer#_active _active}\n */\nTimer.prototype.isActive = function() {\n    return this._active;\n};\n\n/**\n * Set or cancel timer usage.\n * Depending of this schedules related action execution or cancels action execution.\n * <br>\n * Consecutive calling with <code>bActive = true</code> leads to related action execution delaying.\n *\n * @param {Boolean} bActive\n *      <code>true</code> to schedule related action execution, <code>false</code> to cancel action execution.\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#_active _active}\n * @see {@link module:chronoman~Timer#_executionQty _executionQty}\n * @see {@link module:chronoman~Timer#execute execute}\n */\nTimer.prototype.setActive = function(bActive) {\n    \"use strict\";\n    if (bActive && ! this._active) {\n        this._executionQty = 0;\n    }\n    this._active = bActive;\n    // Consecutive calling with bActive = true leads to action execution delaying\n    this._clearTimeout();\n    if (bActive) {\n        this._setTimeout();\n    }\n    return this;\n};\n\n/**\n * Start timer usage (make it active).\n *\n * @param {module:chronoman~PeriodValue | Object} [property]\n *      Time period in milliseconds that is used to schedule related action execution\n *      (new value for {@link module:chronoman~Timer#setPeriod period} property)\n *      or object that specifies new values for timer properties (see {@link module:chronoman~Timer#setProperties setProperties}).\n *      The current value of {@link module:chronoman~Timer#getPeriod period} property is used by default.\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#setActive setActive}\n * @see {@link module:chronoman~Timer#setPeriod setPeriod}\n * @see {@link module:chronoman~Timer#setProperties setProperties}\n * @see {@link module:chronoman~Timer#stop stop}\n */\nTimer.prototype.start = function(property) {\n    \"use strict\";\n    var propType = typeof property;\n    if (propType === \"number\" || propType === \"function\" || Array.isArray(property)) {\n        this.setPeriod(property);\n    }\n    else if (property && propType === \"object\") {\n        this.setProperties(property);\n    }\n    return this.setActive(true);\n};\n\n/**\n * Stop timer usage (make it inactive).\n *\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#setActive setActive}\n * @see {@link module:chronoman~Timer#start start}\n */\nTimer.prototype.stop = function() {\n    return this.setActive(false);\n};\n\n/**\n * Related action that should be executed after time period is elapsed.\n * <br>\n * Can be a function or an object having <code>execute</code> method.\n * <br>\n * The timer instance to which the action is associated will be passed as function's/method's parameter\n * if {@link module:chronoman~Timer#setPassToAction passToAction} property is set to <code>true</code>.\n *\n * @protected\n * @type {module:chronoman~Action}\n * @see {@link module:chronoman~Timer#execute execute}\n */\nTimer.prototype._action = null;\n\n/**\n * Return value that represents action.\n *\n * @return {module:chronoman~Action}\n *      Function that represents action.\n * @method\n * @see {@link module:chronoman~Timer#_action _action}\n */\nTimer.prototype.getAction = function() {\n    return this._action;\n};\n\n/**\n * Set value which represents action that should be executed after time period is elapsed.\n *\n * @param {module:chronoman~Action} action\n *      Value that represents action.\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#_action _action}\n */\nTimer.prototype.setAction = function(action) {\n    this._action = action;\n    return this;\n};\n\n/**\n * Indicates whether the timer instance (<code>this</code>) should be passed into action function when the function is called.\n * \n * @protected\n * @type {Boolean}\n * @see {@link module:chronoman~Timer#execute execute}\n */\nTimer.prototype._passToAction = false;\n\n/**\n * Test whether the timer instance should be passed into action function when the function is called.\n *\n * @return {Boolean}\n *      <code>true</code>, if the timer instance should be passed, otherwise <code>false</code>.\n * @method\n * @see {@link module:chronoman~Timer#_passToAction _passToAction}\n */\nTimer.prototype.isPassToAction = function() {\n    return this._passToAction;\n};\n\n/**\n * Set or cancel passing of timer instance into action function.\n *\n * @param {Boolean} bPass\n *      <code>true</code>, if the timer instance should be passed into action function, \n *      <code>false</code>, if the instance should not be passed.\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#_passToAction _passToAction}\n */\nTimer.prototype.setPassToAction = function(bPass) {\n    this._passToAction = bPass;\n    return this;\n};\n\n/**\n * Set timer properties.\n *\n * @param {Object} propMap\n *      Specifies property values. Keys are property names, their values are values of corresponding properties.\n *      The following keys (properties) can be specified:\n *      <table>\n *          <tr>\n *              <th>Name</th>\n *              <th>Type</th>\n *              <th>Description</th>\n *          </tr>\n *          <tr>\n *              <td>action</td>\n *              <td>Function</td>\n *              <td>Related action that should be executed after time period is elapsed.</td>\n *          </tr>\n *          <tr>\n *              <td>active</td>\n *              <td>Boolean</td>\n *              <td>Whether timer usage should be immediately started.</td>\n *          </tr>\n *          <tr>\n *              <td>data</td>\n *              <td>Any</td>\n *              <td>Auxiliary data associated with the timer instance.</td>\n *          </tr>\n *          <tr>\n *              <td>passToAction</td>\n *              <td>Boolean</td>\n *              <td>Whether the timer instance should be passed into action function when the function is called.</td>\n *          </tr>\n *          <tr>\n *              <td>period</td>\n *              <td>module:chronoman~PeriodValue</td>\n *              <td>Value determining time period in milliseconds that is used to schedule related action execution.</td>\n *          </tr>\n *          <tr>\n *              <td>recurrent</td>\n *              <td>Boolean</td>\n *              <td>Whether related action should be executed repeatedly.</td>\n *          </tr>\n *          <tr>\n *              <td>repeatQty</td>\n *              <td>Integer</td>\n *              <td>How many times related action should be repeated after first execution.</td>\n *          </tr>\n *          <tr>\n *              <td>repeatTest</td>\n *              <td>Function</td>\n *              <td>Function that should be used to determine whether action execution should be repeated.</td>\n *          </tr>\n *      </table>\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#setAction setAction}\n * @see {@link module:chronoman~Timer#setActive setActive}\n * @see {@link module:chronoman~Timer#setData setData}\n * @see {@link module:chronoman~Timer#setPassToAction setPassToAction}\n * @see {@link module:chronoman~Timer#setPeriod setPeriod}\n * @see {@link module:chronoman~Timer#setRecurrent setRecurrent}\n * @see {@link module:chronoman~Timer#setRepeatQty setRepeatQty}\n * @see {@link module:chronoman~Timer#setRepeatTest setRepeatTest}\n */\nTimer.prototype.setProperties = function(propMap) {\n    if (propMap && typeof propMap === \"object\") {\n        if (\"action\" in propMap) {\n            this.setAction(propMap.action);\n        }\n        if (\"period\" in propMap) {\n            this.setPeriod(propMap.period);\n        }\n        if (\"recurrent\" in propMap) {\n            this.setRecurrent(propMap.recurrent);\n        }\n        if (\"repeatQty\" in propMap) {\n            this.setRepeatQty(propMap.repeatQty);\n        }\n        if (\"repeatTest\" in propMap) {\n            this.setRepeatTest(propMap.repeatTest);\n        }\n        if (\"active\" in propMap) {\n            this.setActive(propMap.active);\n        }\n        if (\"passToAction\" in propMap) {\n            this.setPassToAction(propMap.passToAction);\n        }\n        if (\"data\" in propMap) {\n            this.setData(propMap.data);\n        }\n    }\n    return this;\n};\n\n/**\n * Result of action's last execution.\n *\n * @type {*}\n * @see {@link module:chronoman~Timer#_action action}\n */\nTimer.prototype.actionResult = void 0;\n\n/**\n * Function that should be executed after time period is elapsed.\n * <br>\n * The timer instance to which the function is associated will be passed as function's parameter\n * if {@link module:chronoman~Timer#setPassToAction passToAction} property is set to <code>true</code>.\n *\n * @type {Function}\n * @see {@link module:chronoman~Timer#execute execute}\n */\nTimer.prototype.onExecute = null;\n\n/**\n * Result of {@link module:chronoman~Timer#onExecute onExecute} last execution.\n *\n * @type {*}\n * @see {@link module:chronoman~Timer#onExecute onExecute}\n */\nTimer.prototype.onExecuteResult = void 0;\n\n/**\n * Execute related action (function).\n * <br>\n * The timer instance to which the action is associated will be passed as function's parameter\n * if {@link module:chronoman~Timer#setPassToAction passToAction} property is set to <code>true</code>.\n * <br>\n * Action's next execution will be scheduled when one of the following conditions is true:\n * <ul>\n * <li>timer is set as recurrent (see {@link module:chronoman~Timer#isRecurrent isRecurrent});\n * <li>specified quantity of repeats is not reached (see {@link module:chronoman~Timer#getRepeatQty getRepeatQty});\n * <li>specified repeat test is passed i.e. the test function returns true value or non-negative number (see {@link module:chronoman~Timer#getRepeatTest getRepeatTest});\n * </ul>\n *\n * @return {Object}\n *      Reference to <code>this</code> object.\n * @method\n * @see {@link module:chronoman~Timer#_active _active}\n * @see {@link module:chronoman~Timer#_executionQty _executionQty}\n * @see {@link module:chronoman~Timer#getAction getAction}\n * @see {@link module:chronoman~Timer#getRepeatQty getRepeatQty}\n * @see {@link module:chronoman~Timer#getRepeatTest getRepeatTest}\n * @see {@link module:chronoman~Timer#isActive isActive}\n * @see {@link module:chronoman~Timer#isPassToAction isPassToAction}\n * @see {@link module:chronoman~Timer#isRecurrent isRecurrent}\n * @see {@link module:chronoman~Timer#onExecute onExecute}\n */\nTimer.prototype.execute = function() {\n    \"use strict\";\n    /*jshint expr:true, laxbreak:true*/\n    var action = this.getAction(),\n        bPassToAction = this.isPassToAction(),\n        repeatTest = this.getRepeatTest(),\n        bActive, period;\n    this._clearTimeout();\n    if (action) {\n        if (typeof action === \"function\") {\n            this.actionResult = bPassToAction\n                ? action(this)\n                : action();\n        }\n        else if (typeof action.execute === \"function\") {\n            this.actionResult = bPassToAction\n                ? action.execute(this)\n                : action.execute();\n        }\n    }\n    if (typeof this.onExecute === \"function\") {\n        this.onExecuteResult = bPassToAction\n            ? this.onExecute(this)\n            : this.onExecute();\n    }\n    this._executionQty++;\n    bActive = this.isActive();\n    if (bActive\n            && (this.isRecurrent()\n                    || this.getRepeatQty() >= this._executionQty\n                    || (repeatTest\n                        && ( (period = repeatTest(this)) || period === 0 )\n                        && (typeof period !== \"number\" || period >= 0))\n                ) ) {\n        this._setTimeout(period);\n    }\n    else if (bActive && ! this._timeoutId) {\n        this._active = false;\n    }\n    return this;\n};\n\n/**\n * Free resources that are allocated for object.\n *\n * @method\n */\nTimer.prototype.dispose = function() {\n    \"use strict\";\n    this._clearTimeout();\n    this._action =\n        this._data =\n        this._period =\n        this._repeatTest =\n        this.onExecute =\n            null;\n};\n\n/**\n * Convert object into string.\n *\n * @method\n */\nTimer.prototype.toString = function() {\n    \"use strict\";\n    var period = this.getPeriod();\n    return [\n            \"Timer: \",\n            \"active - \", this.isActive(),\n            \", period - \", typeof period === \"function\" ? \"function\" : period,\n            \", recurrent - \", this.isRecurrent(),\n            \", repeat qty - \", this.getRepeatQty(),\n            \", repeat test - \", (this.getRepeatTest() ? \"specified\" : \"no\"),\n            \", pass to action - \", this.isPassToAction(),\n            \", action - \", (this.getAction() ? \"specified\" : \"no\"),\n            \", execution qty - \", this.getExecutionQty(),\n            \", data - \", this.getData()\n            ].join(\"\");\n};\n\n// Exports\n\nexport default Timer;\n"]}